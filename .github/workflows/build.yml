name: Build Docker Image

on:
  push:
    branches: [main]
  schedule:
    # Runs "every Monday" (see https://crontab.guru)
    - cron: '0 0 * * MON'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-amd64-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
   
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false

      - name: Log in to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if the image exists
        run: |
          GHCR_TOKEN=$(echo ${{ secrets.GITHUB_TOKEN }} | base64)
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $GHCR_TOKEN" \
            https://ghcr.io/v2/${{ github.repository }}/manifests/${{ env.LUCKY_VERSION }})
          IMAGE_EXISTS=$(if [ $HTTP_CODE -eq 200 ]; then echo "true"; else echo "false"; fi)
          echo "HTTP code: $HTTP_CODE, Image exists: $IMAGE_EXISTS"
          echo IMAGE_EXISTS=$IMAGE_EXISTS >> $GITHUB_ENV

      - name: Get latest lucky version
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        run: |
          LUCKY_VERSION=$(v=$(curl -s https://api.github.com/repos/gdy666/lucky/releases/latest | jq -r '.tag_name'); echo ${v#?})
          echo "Latest Lucky version: $LUCKY_VERSION"
          echo LUCKY_VERSION=$LUCKY_VERSION >> $GITHUB_ENV

      - name: Download latest lucky
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        run: |
          wget -O 'lucky.tar.gz' 'https://github.com/gdy666/lucky/releases/download/v'$LUCKY_VERSION'/lucky_'$LUCKY_VERSION'_Linux_amd64.tar.gz'
          tar -zxvf lucky.tar.gz
          tree

      - name: Set up QEMU
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            zhz1021/lucky:${{ env.LUCKY_VERSION }}-amd64
            zhz1021/lucky:${{ env.LUCKY_VERSION }}
            zhz1021/lucky:latest
            ghcr.io/${{ github.actor }}/lucky:${{ env.LUCKY_VERSION }}-amd64
            ghcr.io/${{ github.actor }}/lucky:${{ env.LUCKY_VERSION }}
            ghcr.io/${{ github.actor }}/lucky:latest

  build-i386-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
   
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false

      - name: Log in to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if the image exists
        run: |
          GHCR_TOKEN=$(echo ${{ secrets.GITHUB_TOKEN }} | base64)
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $GHCR_TOKEN" \
            https://ghcr.io/v2/${{ github.repository }}/manifests/${{ env.LUCKY_VERSION }})
          IMAGE_EXISTS=$(if [ $HTTP_CODE -eq 200 ]; then echo "true"; else echo "false"; fi)
          echo "HTTP code: $HTTP_CODE, Image exists: $IMAGE_EXISTS"
          echo IMAGE_EXISTS=$IMAGE_EXISTS >> $GITHUB_ENV

      - name: Get latest lucky version
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        run: |
          LUCKY_VERSION=$(v=$(curl -s https://api.github.com/repos/gdy666/lucky/releases/latest | jq -r '.tag_name'); echo ${v#?})
          echo "Latest Lucky version: $LUCKY_VERSION"
          echo LUCKY_VERSION=$LUCKY_VERSION >> $GITHUB_ENV

      - name: Download latest lucky
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        run: |
          wget -O 'lucky.tar.gz' 'https://github.com/gdy666/lucky/releases/download/v'$LUCKY_VERSION'/lucky_'$LUCKY_VERSION'_Linux_i386.tar.gz'
          tar -zxvf lucky.tar.gz
          tree

      - name: Set up QEMU
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/386
          push: true
          tags: |
            zhz1021/lucky:${{ env.LUCKY_VERSION }}-i386
            zhz1021/lucky:${{ env.LUCKY_VERSION }}
            zhz1021/lucky:latest
            ghcr.io/${{ github.actor }}/lucky:${{ env.LUCKY_VERSION }}-i386
            ghcr.io/${{ github.actor }}/lucky:${{ env.LUCKY_VERSION }}
            ghcr.io/${{ github.actor }}/lucky:latest

  build-arm64-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
   
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false

      - name: Log in to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if the image exists
        run: |
          GHCR_TOKEN=$(echo ${{ secrets.GITHUB_TOKEN }} | base64)
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $GHCR_TOKEN" \
            https://ghcr.io/v2/${{ github.repository }}/manifests/${{ env.LUCKY_VERSION }})
          IMAGE_EXISTS=$(if [ $HTTP_CODE -eq 200 ]; then echo "true"; else echo "false"; fi)
          echo "HTTP code: $HTTP_CODE, Image exists: $IMAGE_EXISTS"
          echo IMAGE_EXISTS=$IMAGE_EXISTS >> $GITHUB_ENV

      - name: Get latest lucky version
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        run: |
          LUCKY_VERSION=$(v=$(curl -s https://api.github.com/repos/gdy666/lucky/releases/latest | jq -r '.tag_name'); echo ${v#?})
          echo "Latest Lucky version: $LUCKY_VERSION"
          echo LUCKY_VERSION=$LUCKY_VERSION >> $GITHUB_ENV

      - name: Download latest lucky
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        run: |
          wget -O 'lucky.tar.gz' 'https://github.com/gdy666/lucky/releases/download/v'$LUCKY_VERSION'/lucky_'$LUCKY_VERSION'_Linux_arm64.tar.gz'
          tar -zxvf lucky.tar.gz
          tree

      - name: Set up QEMU
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            zhz1021/lucky:${{ env.LUCKY_VERSION }}-arm64
            zhz1021/lucky:${{ env.LUCKY_VERSION }}
            zhz1021/lucky:latest
            ghcr.io/${{ github.actor }}/lucky:${{ env.LUCKY_VERSION }}-arm64
            ghcr.io/${{ github.actor }}/lucky:${{ env.LUCKY_VERSION }}
            ghcr.io/${{ github.actor }}/lucky:latest

  build-armv7-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
   
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false

      - name: Log in to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if the image exists
        run: |
          GHCR_TOKEN=$(echo ${{ secrets.GITHUB_TOKEN }} | base64)
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $GHCR_TOKEN" \
            https://ghcr.io/v2/${{ github.repository }}/manifests/${{ env.LUCKY_VERSION }})
          IMAGE_EXISTS=$(if [ $HTTP_CODE -eq 200 ]; then echo "true"; else echo "false"; fi)
          echo "HTTP code: $HTTP_CODE, Image exists: $IMAGE_EXISTS"
          echo IMAGE_EXISTS=$IMAGE_EXISTS >> $GITHUB_ENV

      - name: Get latest lucky version
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        run: |
          LUCKY_VERSION=$(v=$(curl -s https://api.github.com/repos/gdy666/lucky/releases/latest | jq -r '.tag_name'); echo ${v#?})
          echo "Latest Lucky version: $LUCKY_VERSION"
          echo LUCKY_VERSION=$LUCKY_VERSION >> $GITHUB_ENV

      - name: Download latest lucky
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        run: |
          wget -O 'lucky.tar.gz' 'https://github.com/gdy666/lucky/releases/download/v'$LUCKY_VERSION'/lucky_'$LUCKY_VERSION'_Linux_armv7.tar.gz'
          tar -zxvf lucky.tar.gz
          tree

      - name: Set up QEMU
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        if: ${{ env.IMAGE_EXISTS == 'false' || github.event_name != 'schedule' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm/v7
          push: true
          tags: |
            zhz1021/lucky:${{ env.LUCKY_VERSION }}-armv7
            zhz1021/lucky:${{ env.LUCKY_VERSION }}
            zhz1021/lucky:latest
            ghcr.io/${{ github.actor }}/lucky:${{ env.LUCKY_VERSION }}-armv7
            ghcr.io/${{ github.actor }}/lucky:${{ env.LUCKY_VERSION }}
            ghcr.io/${{ github.actor }}/lucky:latest